#include<bits/stdc++.h>
using namespace std;

const int maxn = 10050;
const double eps = 1e-8;

struct point{
    double x,y;
    point(double x=0,double y=0):x(x),y(y){}
    bool operator < (const point &a)const{
        return x<a.x||x==a.x&&y<a.y;
    }
}p[maxn],sta[maxn];

int n;
double cross(point p0,point p1,point p2){
    return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);
}
double mj(point p0,point p1,point p2){
    return fabs(cross(p0,p1,p2))/2;
}
double dis(point p1,point p2){
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
void graham(){
    sort(p,p+n);
    int top=1;
    sta[0]=p[0];sta[1]=p[1];
    for(int i=2;i<n;i++){
        while(top&&cross(sta[top-1],sta[top],p[i])>-eps)--top;
        sta[++top]=p[i];
    }
    int k=top;
    for(int i=n-2;i>=0;i--){
        while(top>k&&cross(sta[top-1],sta[top],p[i])>-eps)--top;
        sta[++top]=p[i];
    }
    if(top)top--;
    for(int i=0;i<=top;i++)p[i]=sta[i];
    n=top+1;
}
double cal(int a,int b,int c){
    return mj(p[a],p[b],p[c]);
}
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;i++)scanf("%lf%lf",&p[i].x,&p[i].y);
    graham();
    if(n<3){
        cout<<0;return 0;
    }
    double ans=0;
    for(int a=0;a<n;a++){
        int b=(a+1)%n;
        int c=(b+1)%n;
        while(1){
            //cout<<a<<" "<<b<<" "<<c<<endl;
            ans = max(ans , cal(a,b,c) );
            while(cal(a,b,c) < cal(a,b,(c+1)%n) )ans = max(ans , cal(a,b,c) ) , c=(c+1)%n;
            b=(b+1)%n;
            if((c+1)%n==a)break;
        }
    }
    printf("%.10f",ans);
    return 0;
}