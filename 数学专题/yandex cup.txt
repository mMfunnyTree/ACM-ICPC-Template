交互题，加权数值求中位数


#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 1e4+10;
int rest[maxn],a[maxn];
ll w[maxn],base[12];
int n,k;
pair<int,ll> p[maxn];
char op[10];

int main(){
    base[0]=1;for(int i=1;i<11;i++)base[i]=base[i-1]*4;
    scanf("%d%d",&n,&k);
    for(int i=1;i<=n;i++){
        scanf("%d",a+i);
        rest[i]=k;
    }
    for(;;){
        ll sum=0;
        for(int i=1;i<=n;i++){
            p[i]=make_pair(a[i],base[rest[i]]-1);
            sum+=p[i].second;
        }sort(p+1,p+1+n);
        ll now=0;
        int x;
        for(int i=1;i<=n;i++){
            now+=p[i].second;
            if(now*2>=sum){
                x=p[i].first;break;
            }
        }
        printf("%d\n",x);
        fflush(stdout);
        scanf("%s",op);
        if(op[0]=='E')return 0;
        if(op[0]=='<'){
            for(int i=1;i<=n;i++){
                if(a[i]<=x&&a[i])rest[i]--;
            }
        }
        else{
            for(int i=1;i<=n;i++){
                if(a[i]>=x&&a[i])rest[i]--;
            }
        }
        for(int i=1;i<=n;i++)scanf("%d",a+i);
    }
    return 0;
}


构造题，根据异或的性质求解

#include<bits/stdc++.h>
using namespace std;

const int maxn=1e5+10;

int a[maxn];
int n;
pair<int,int> p[maxn];
int cnt[maxn];

int main(){
    cin>>n;
    for(int i=1;i<=n;i++)scanf("%d",a+i);
    for(int i=1;i<n;i++){
        scanf("%d%d",&p[i].first,&p[i].second);
        cnt[p[i].first]++;cnt[p[i].second]++;
    }
    vector<int> can;
    int sum=n;
    for(int i=1;i<=n;i++){
        if(cnt[i]&1){
            if(a[i])can.push_back(i);
            sum^=i;
        }
    }
    if(!sum){
        cout<<n<<endl;
        for(int i=1;i<n;i++)cout<<p[i].first<<" "<<p[i].second<<"\n";
        return 0;
    }
    if(!can.size()){cout<<-1;return 0;}
    else if(can.size()==1){
        int cc=sum^can[0];
        if(cc>=1&&cc<=1e9&&(!(cc>=1&&cc<=n))){
            cout<<n<<endl;
            for(int i=1;i<n;i++){
                if(can[0]==p[i].first)cout<<cc;
                else cout<<p[i].first;
                cout<<" ";
                if(can[0]==p[i].second)cout<<cc;
                else cout<<p[i].second;
                cout<<"\n";
            }
        }
        else if(cc>=1&&cc<=n&&a[cc]){
            cout<<n<<endl;
            for(int i=1;i<n;i++){
                if(can[0]==p[i].first)cout<<cc;
                else if(cc==p[i].first)cout<<(cc^100000000);
                else cout<<p[i].first;
                cout<<" ";
                if(can[0]==p[i].second)cout<<cc;
                else if(cc==p[i].second)cout<<(cc^100000000);
                else cout<<p[i].second;
                cout<<"\n";
            }
        }
        else cout<<-1;
        return 0;
    }
    else{
        int cc1=can[0]^(100000000)^sum;
        int cc2=can[1]^100000000;

        if(cc1==cc2){
            if(can.size()==2){cout<<-1;return 0;}
            can[1]=can[2];
            cc2=can[2]^100000000;
        }

        cout<<n<<endl;
        for(int i=1;i<n;i++){
            if(can[0]==p[i].first)cout<<cc1;
            else if(can[1]==p[i].first)cout<<cc2;
            else cout<<p[i].first;
            cout<<" ";
            if(can[0]==p[i].second)cout<<cc1;
            else if(can[1]==p[i].second)cout<<cc2;
            else cout<<p[i].second;
            cout<<"\n";
        }
    }
    return 0;
}