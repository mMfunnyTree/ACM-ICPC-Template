
1.回文自动机

len[i]:节点i的回文串的长度
next[i][c]：节点i的回文串在两边添加字符c以后变成的回文串的编号(和字典树的next指针类似)
fail[i]：类似于AC自动机的fail指针，指向失配后需要跳转到的节点
cnt[i]：节点i表示的回文串在S中出现的次数（建树时求出的不是完全的，count()加上子节点以后才是正确的）
num[i]：以节点i回文串的末尾字符结尾的但不包含本条路径上的回文串的数目。(也就是fail指针路径的深度)
last：指向最新添加的回文结点
S[i]表示第i次添加的字符
p表示添加的节点个数

空间复杂度为O（N*字符集大小），时间复杂度为O（N*log（字符集大小））

1.求串S前缀0~i内本质不同回文串的个数（两个串长度不同或者长度相同且至少有一个字符不同便是本质不同）

2.求串S内每一个本质不同回文串出现的次数

3.求串S内回文串的个数（其实就是1和2结合起来）

4.求以下标i结尾的回文串的个数

#define  LL long long
#define  ULL unsigned long long
using namespace std;
const int MAXN = 100005 ;
const int N = 26;
char s[MAXN];
struct Palindromic_Tree
{
     int next[MAXN][N] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
     int fail[MAXN] ;//fail指针，失配后跳转到fail指针指向的节点
     int cnt[MAXN] ;
     int num[MAXN] ; // 当前节点通过fail指针到达0节点或1节点的步数(fail指针的深度)
     int len[MAXN] ;//len[i]表示节点i表示的回文串的长度
     int S[MAXN] ;//存放添加的字符
     int last ;//指向上一个字符所在的节点，方便下一次add
     int n ;//字符数组指针
     int p ;//节点指针
     int newnode(int l)     //新建节点
     {
           for(int i = 0 ; i < N ; ++ i) next[p][i] = 0 ;
           cnt[p] = 0 ;
           num[p] = 0 ;
           len[p] = l ;
           return p ++ ;
     }
     void init()   //初始化
     {
           p = 0 ;
           newnode(0) ;
           newnode(-1) ;
           last = 0 ;
           n = 0 ;
           S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
           fail[0] = 1 ;
     }
     int get_fail(int x)     //和KMP一样，失配后找一个尽量最长的
     {
           while(S[n - len[x] - 1] != S[n]) x = fail[x] ;
           return x ;
     }
     void add(int c,int pos)
     {
           printf("%d:",p);
           c -= 'a';
           S[++ n] = c ;
           int cur = get_fail(last);   //通过上一个回文串找这个回文串的匹配位置
           printf("%d ",cur);
           if(!next[cur][c])     //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
           {
                 int now = newnode(len[cur] + 2) ;   //新建节点
                 fail[now] = next[get_fail(fail[cur])][c] ;   //和AC自动机一样建立fail指针，以便失配后跳转
                 next[cur][c] = now ;
                 num[now] = num[fail[now]] + 1 ;
                 for(int i=pos-len[now]+1; i<=pos; ++i) printf("%c",s[i]);
           } last = next[cur][c] ;
           cnt[last] ++ ;
           putchar(10);
     }
     void count()
     {
           for(int i = p - 1 ; i >= 0 ; -- i) cnt[fail[i]] += cnt[i] ;
           //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
     }
} run;
int main()
{
     scanf("%s",&s);
     int n=strlen(s);
     run.init();
     for(int i=0; i<n; i++) run.add(s[i],i);
     run.count();
     return 0;
}



#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 10;
const int maxn = 2e6+10;
const int mod = 1e9+7;
char s[maxn];

ll qpow(ll a,ll n){
    ll ret=1;
    while(n){
        if(n&1)ret=ret*a%mod;
        a=a*a%mod;
        n>>=1;
    }return ret;
}

struct pam{
    int next[maxn][N],fail[maxn];
    int len[maxn],S[maxn];
    int cnt[maxn],num[maxn];
    int ppos[maxn],number[maxn];
    int last,n,p;
    int newnode(int l){
        for(int i=0;i<N;i++)next[p][i]=0;
        cnt[p]=num[p]=0;
        len[p]=l;
        return p++;
    }
    void init(){
        p=0;
        newnode(0);newnode(-1);
        last=n=0;
        S[n]=-1;
        fail[0]=1;
    }
    int get_fail(int x){
        while(S[n-len[x]-1]!=S[n])x=fail[x];
        return x;
    }
    void add(int c,int pos){
        c-='0';
        S[++n]=c;
        int cur=get_fail(last);
        //printf("%d:%d ",p,cur);
        if(!next[cur][c]){
            int now=newnode(len[cur]+2);
            ppos[now]=pos;
            fail[now]=next[get_fail(fail[cur])][c];
            next[cur][c]=now;
            number[now] = ((10ll*number[cur])%mod+c)%mod;
            if(len[cur]>=0){
                number[now]=(number[now]+1ll*c*qpow(10,len[cur]+1)%mod)%mod;
            }
            num[now]=num[fail[now]]+1;
            //for(int i=pos-len[now]+1;i<=pos;i++)printf("%c",s[i]);
        }
        last = next[cur][c];
        cnt[last]++;
        //putchar(10);
    }
    void count(){
        ll ret=0;
        for(int i=p-1;i>=0;i--){
            cnt[fail[i]]+=cnt[i];
            ret=(ret+number[i])%mod;
        }cout<<ret<<endl;
    }
}run;

int hs[maxn],po[maxn];
ll geth(int l,int r){
    ll ret=hs[r]-1ll*hs[l-1]*po[r-l+1]%mod;
    ret%=mod;ret+=mod;ret%=mod;
    return ret;
}

int main(){
    po[0]=1;
    for(int i=1;i<maxn;i++)po[i]=1ll*po[i-1]*10%mod;
    while(scanf("%s",s+1)!=EOF){
        int len=strlen(s+1);
        run.init();
        for(int i=1;i<=len;i++){
            run.add(s[i],i);
            hs[i]=(1ll*hs[i-1]*10+(s[i]-'0'))%mod;
        }
        run.count();
//        ll ans=0;
//        for(int i=2;i<run.p;i++){
//            ans=(ans+geth(run.ppos[i]-run.len[i]+1,run.ppos[i]))%mod;
//        }
//        cout<<ans<<endl;
    }
    return 0;
}

2.SAM统计出现次数在[A,B]之间的串的个数

/**统计出现次数在[A,B]之间的串的个数**/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 2e5+1000;
char s[maxn];
int pa[maxn<<1],son[maxn<<1][27];
int deep[maxn<<1],cnt,root,last;

int sum[maxn<<1],topo[maxn<<1];
int r[maxn<<1];

inline int newnode(int _deep){
    deep[++cnt]=_deep;
    return cnt;
}

inline void sam(int alp){
    int np=newnode(deep[last]+1);
    int u=last;
    memset(son[np],0,sizeof son[np]);
    while(u && !son[u][alp])son[u][alp]=np,u=pa[u];
    if(!u)pa[np]=root;
    else{
        int v=son[u][alp];
        if(deep[v]==deep[u]+1)pa[np]=v;
        else{
            int nv=newnode(deep[u]+1);
            memcpy(son[nv],son[v],sizeof son[v]);
            pa[nv]=pa[v],pa[v]=pa[np]=nv;
            while(u&&son[u][alp]==v)son[u][alp]=nv,u=pa[u];
        }
    }
    last=np;
}

inline void toposort(){
    for(int a=1;a<=deep[last];a++)sum[a]=0;
    for(int a=1;a<=cnt;a++)sum[deep[a]]++;
    for(int a=1;a<=deep[last];a++)sum[a]+=sum[a-1];
    for(int a=1;a<=cnt;a++)topo[sum[deep[a]]--]=a;
}

inline void pre(){
    cnt=0;
    root=last=newnode(0);
    memset(r,0,sizeof r);
}
int A,B;
int main(){
    while(scanf("%s%d%d",s,&A,&B)!=EOF){
    pre();
    memset(son[1],0,sizeof son[1]);
    int len=strlen(s);
    for(int a=0;a<len;a++){
        sam(s[a]-'A');
    }
    toposort();
    int tmp=root;
    for(int a=0;a<len;a++){
        tmp=son[tmp][s[a]-'A'];
        r[tmp]=1;
    }
    /**将所有状态的right集合大小赋值为1**/
    for(int a=cnt;a>=1;a--)r[pa[topo[a]]] += r[topo[a]];
    long long ans=0;
    for(int a=cnt;a>=1;a--){
        if(r[topo[a]]>=A && r[topo[a]]<=B){
            ans+=deep[topo[a]] - deep[pa[topo[a]]];
            /**right集合中不同子串个数为deep[p] - deep[pa[p]]]**/
        }
    }
    cout<<ans<<endl;
    }
    return 0;
}


3.SAM求第k小串


/**T为0则表示不同位置的相同子串算作一个。T=1则表示不同位置的相同子串算作多个**/
/**统计出现次数在[A,B]之间的串的个数**/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 1e6+1000;
char s[maxn];
int pa[maxn<<1],son[maxn<<1][27];
int deep[maxn<<1],cnt,root,last;

int sum[maxn<<1],topo[maxn<<1];
int r[maxn<<1],rr[maxn<<1];

inline int newnode(int _deep){
    deep[++cnt]=_deep;
    return cnt;
}

inline void sam(int alp){
    int np=newnode(deep[last]+1);
    int u=last;r[np]=1;
    memset(son[np],0,sizeof son[np]);
    while(u && !son[u][alp])son[u][alp]=np,u=pa[u];
    if(!u)pa[np]=root;
    else{
        int v=son[u][alp];
        if(deep[v]==deep[u]+1)pa[np]=v;
        else{
            int nv=newnode(deep[u]+1);
            memcpy(son[nv],son[v],sizeof son[v]);
            pa[nv]=pa[v],pa[v]=pa[np]=nv;
            while(u&&son[u][alp]==v)son[u][alp]=nv,u=pa[u];
        }
    }
    last=np;
}

inline void toposort(){
    for(int a=1;a<=cnt;a++)sum[deep[a]]++;
    for(int a=1;a<=deep[last];a++)sum[a]+=sum[a-1];
    for(int a=1;a<=cnt;a++)topo[sum[deep[a]]--]=a;
}

inline void pre(){
    cnt=0;
    root=last=newnode(0);
}
int T,K;
int main(){
    scanf("%s%d%d",s,&T,&K);
    pre();
    memset(son[1],0,sizeof son[1]);
    int len=strlen(s);
    for(int a=0;a<len;a++){
        sam(s[a]-'a');
    }
    toposort();
    for(int i=cnt;i;i--){
        if(T)r[pa[topo[i]]] += r[topo[i]];
        else r[topo[i]]=1;
    }
    r[root]=0;
    for(int i=cnt;i;i--){
        rr[topo[i]]=r[topo[i]];
        for(int j=0;j<26;j++){
            rr[topo[i]]+=rr[son[topo[i]][j]];
        }
    }

    int now=root;
    if(K>rr[root])return puts("-1");
    while(K){
        K-=r[now];
        if(K<=0)break;
        for(int i=0;i<26;i++){
            if(son[now][i]){
                if(rr[son[now][i]]>=K){
                    putchar(i+'a');
                    now=son[now][i];
                    break;
                }
                else K-=rr[son[now][i]];
            }
        }
    }
    puts("");
    return 0;
}


#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
using namespace std;
const int MAXN = 1e6 + 10;
inline int read() {
    char c = getchar(); int x = 0, f = 1;
    while(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}
    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();
    return x * f;
}
char s[MAXN];
int opt, K, N;
int fa[MAXN], len[MAXN], ch[MAXN][27], siz[MAXN], right[MAXN], tot = 1, last = 1, root = 1;
void insert(int x) {
    int now = ++tot, pre = last; last = now; len[now] = len[pre] + 1;
    right[now] = 1;
    for(; pre && !ch[pre][x]; pre = fa[pre]) ch[pre][x] = now;
    if(!pre) fa[now] = root;
    else {
        int q = ch[pre][x];
        if(len[q] == len[pre] + 1) fa[now] = q;
        else {
            int nows = ++tot; len[nows] = len[pre] + 1;
            memcpy(ch[nows], ch[q], sizeof(ch[q]));
            fa[nows] = fa[q]; fa[q] = fa[now] = nows;
            for(; pre && ch[pre][x] == q; pre = fa[pre]) ch[pre][x] = nows;
        }
    }
}
void Query(int K) {
    int now = root;
    if(K > siz[root]) return (void) printf("-1");
    while(K) {
        if(now != root) K -= right[now];
        if(K <= 0) break;
        for(int i = 0; i <= 25; i++)
            if(ch[now][i]) {
                if(siz[ch[now][i]] >= K) {putchar(i + 'a'); now = ch[now][i]; break; }
                else K -= siz[ch[now][i]];
            }
    }
    puts("");
}
void Topsort() {
    static int A[MAXN], a[MAXN];
    for(int i = 1; i <= tot; i++) A[len[i]]++;
    for(int i = 1; i <= N; i++)   A[i] += A[i - 1];
    for(int i = tot; i >= 1; i--) a[A[len[i]]--] = i;
    //for(int i = 1; i <= tot; i++) siz[i] = 1;

    if(opt == 1)
        for(int i = tot; i; i--) right[fa[a[i]]] += right[a[i]];
    if(opt == 0)
        for(int i = tot; i; i--) right[a[i]] = 1;
    for(int i = tot; i; i--) {
        siz[a[i]] = right[a[i]];
        for(int j = 0; j <= 25; j++)
            siz[a[i]] += siz[ch[a[i]][j]];
    }
}
int main() {
    scanf("%s", s + 1);
    opt = read(), K = read();
    N = strlen(s + 1);
    for(int i = 1; i <= N; i++) insert(s[i] - 'a');
    Topsort();
    Query(K);
    return 0;
}


4.SAM在线修改right集合

/**统计出现次数在[A,B]之间的串的个数**/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 2e5+1000;
char s[maxn];
int pa[maxn<<1],son[maxn<<1][27];
int deep[maxn<<1],cnt,root,last;

int sum[maxn<<1],topo[maxn<<1];
int r[maxn<<1];

inline int newnode(int _deep){
    deep[++cnt]=_deep;
    return cnt;
}

inline void sam(int alp){
    int np=newnode(deep[last]+1);
    int u=last;
    memset(son[np],0,sizeof son[np]);
    while(u && !son[u][alp])son[u][alp]=np,u=pa[u];
    if(!u)pa[np]=root;
    else{
        int v=son[u][alp];
        if(deep[v]==deep[u]+1)pa[np]=v;
        else{
            int nv=newnode(deep[u]+1);
            memcpy(son[nv],son[v],sizeof son[v]);
            r[nv]=r[v];
            pa[nv]=pa[v],pa[v]=pa[np]=nv;
            while(u&&son[u][alp]==v)son[u][alp]=nv,u=pa[u];
        }
    }
    last=np;
    int temp=last;
    while(temp>1){
        r[temp]++;
        temp=pa[temp];
    }
}

inline void toposort(){
    for(int a=1;a<=deep[last];a++)sum[a]=0;
    for(int a=1;a<=cnt;a++)sum[deep[a]]++;
    for(int a=1;a<=deep[last];a++)sum[a]+=sum[a-1];
    for(int a=1;a<=cnt;a++)topo[sum[deep[a]]--]=a;
}

inline void pre(){
    cnt=0;
    root=last=newnode(0);
    memset(r,0,sizeof r);
}
int A,B;
int main(){
    while(scanf("%s%d%d",s,&A,&B)!=EOF){
    pre();
    memset(son[1],0,sizeof son[1]);
    int len=strlen(s);
    for(int a=0;a<len;a++){
        sam(s[a]-'A');
    }
    toposort();
    long long ans=0;
    for(int a=cnt;a>=1;a--){
        if(r[topo[a]]>=A && r[topo[a]]<=B){
            ans+=deep[topo[a]] - deep[pa[topo[a]]];
        }
    }
    cout<<ans<<endl;
    }
    return 0;
}


5.ac自动机拓扑排序DP

#include <bits/stdc++.h>
using namespace std;

const int maxn = 2e5+10;
string s[maxn];
char ans[maxn];
int flag=0,ansnum=0,tt=0;
int G[maxn][2];
void addedge(int u,int v,int w){
    G[u][w]=v;
}

struct Trie{
    int next[maxn][2],fail[maxn],ed[maxn];
    int root,L;
    int newnode(){
        memset(next[L],-1,sizeof next[L]);
        ed[L++]=0;
        return L-1;
    }
    void init(){
        memset(fail,0,sizeof fail);
        memset(ed,0,sizeof ed);
        L=0;
        root=newnode();
    }
    void insert(string buf){
        int len=buf.length();
        int now=root;
        for(int i=0;i<len;i++){
            if(next[now][buf[i]-'0']==-1){
                next[now][buf[i]-'0']=newnode();
            }
            now=next[now][buf[i]-'0'];
        }
        ed[now]=1;
    }
    void buildfail(){
        queue<int> Q;
        fail[root]=root;
        for(int i=0;i<2;i++){
            if(next[root][i]==-1)
                next[root][i]=root;
            else{
                fail[next[root][i]]=root;
                Q.push(next[root][i]);
            }
        }
        while(!Q.empty()){
            int now=Q.front();Q.pop();
            if(ed[fail[now]])ed[now]=1;
            for(int i=0;i<2;i++){
                if(next[now][i]==-1){
                    next[now][i]=next[fail[now]][i];
                }
                else{
                    fail[next[now][i]]=next[fail[now]][i];
                    Q.push(next[now][i]);
                }
            }
        }
    }
    int in[maxn],vis[maxn],inq[maxn],in2[maxn];
    void dfs2(int now){
        for(int i=0;i<2;i++){
            int j=next[now][i];
            if(ed[j])continue;
            in[j]++;in2[j]++;
            if(in[j]==1)dfs2(j);
        }
    }
    bool topo(){
        memset(in,0,sizeof in);
        memset(in2,0,sizeof in2);
        memset(inq,0,sizeof inq);
        memset(vis,0,sizeof vis);
        dfs2(0);
        queue<int> q;
        if(in[0])return 1;
        q.push(0);
        while(!q.empty()){
            int now=q.front();q.pop();
            for(int i=0;i<2;i++){
                int j=next[now][i];
                if(ed[j])continue;
                in[j]--;
                vis[j]=1;
                if(!in[j]){
                    inq[j]=1;
                    q.push(j);
                }
            }
        }
        for(int i=0;i<L;i++){
            if(inq[i]!=vis[i])return true;
        }
        return false;
    }
    int dp[maxn],to[maxn],maxx=0;
    void dfs5(int now,int num){
        maxx=max(num,maxx);
        for(int i=0;i<2;i++){
            int j=next[now][i];
            if(ed[j])continue;
            dfs5(j,num+1);
        }
    }
    void dfs3(int now,int num){
        if(num==maxx){tt=1;return;}
        for(int i=0;i<2;i++){
            int j=next[now][i];
            if(ed[j])continue;
            dfs3(j,num+1);
            if(tt){
                ans[num]=i+'0';return;
            }
        }
    }
    void query(){
        if(topo()){
            puts("-1");return ;
        }
        memset(dp,0,sizeof dp);
        memset(to,0,sizeof to);
        queue<int>q;
        dfs5(0,0);
        dfs3(0,0);
        printf("%s",ans);
    }
}ac;
void init(){
    memset(ans,0,sizeof ans);
    flag=tt=ansnum=0;
}
int main(){
    int n;
    scanf("%d",&n);
    ac.init();
    init();
    for(int i=0;i<n;i++){
        cin>>s[i];
        ac.insert(s[i]);
    }
    ac.buildfail();
    ac.query();
    return 0;
}
