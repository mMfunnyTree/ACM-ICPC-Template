1.java高精度开方
import java.util.*;
import java.math.*;
public class Main{
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		int t=in.nextInt();
		for(int z=0;z<t;z++){
			BigInteger x=in.nextBigInteger();
			int p=(x.toString().length()+1)/2;
			char tmp[]=new char[p+1];
			tmp[0]='1';
			for(int i=1;i<=p;i++)tmp[i]='0';
			String tt=String.valueOf(tmp);
			BigInteger r=new BigInteger(tt);
			while(true){
				BigInteger dec=r.multiply(r).subtract(x).divide(r.multiply(BigInteger.valueOf(2)));
				if(dec.compareTo(BigInteger.ZERO)<=0)break;
				r=r.subtract(dec);
			}
			String rr=r.toString();
			int rrr=rr.charAt(rr.length()-1);
			if(rrr%2==0)System.out.println("1");
			else System.out.println("0");
		}
	}
}

import java.util.*;
import java.math.*;
public class Main{
	//二分开根板子
    public static BigInteger check(BigInteger n,BigInteger x) {
        BigInteger ans=BigInteger.valueOf(1);
        BigInteger a=BigInteger.valueOf(1);
        for(BigInteger i=BigInteger.ZERO;i.compareTo(n)<0;i=i.add(a)) {
            ans=ans.multiply(x);
        }
        return ans;
    }
    static BigInteger Get(BigInteger m) {
    	BigInteger l=BigInteger.ZERO;
        BigInteger a=BigInteger.valueOf(2);
        BigInteger b=BigInteger.valueOf(1);
        BigInteger r=BigInteger.valueOf(1);
        BigInteger mid=BigInteger.ZERO;
        while(check(BigInteger.valueOf(2),r).compareTo(m)<=0) {
            l=r;
            r=r.multiply(a);
        }
        while(l.compareTo(r)<=0) {
            mid=l.add(r).divide(a);
            if(check(BigInteger.valueOf(2),mid).compareTo(m)<=0) l=mid.add(b);
            else r=mid.subtract(b);
        }
        return r;
    }
    public static void main(String[]args) {
    	int T;
        Scanner sca=new Scanner(System.in);
        T=sca.nextInt();
        while(T--!=0) {
        	BigInteger m=sca.nextBigInteger();
            BigInteger res1=Get(m);
            BigInteger n;
            n=m.multiply(m.subtract(BigInteger.ONE)).divide(BigInteger.valueOf(2));
            BigInteger res2=Get(n);
            BigInteger tmp1=res1.multiply(res1);
            BigInteger tmp2=res2.multiply(res2);
            if(tmp1.equals(m)&&tmp2.equals(n)) {
            	System.out.println("Arena of Valor");
            }
            else if(tmp1.compareTo(m)==0&&tmp2.compareTo(n)!=0) {
            	System.out.println("Hearth Stone");
            }
            else if(tmp1.compareTo(m)!=0&&tmp2.compareTo(n)==0) {
            	System.out.println("Clash Royale");
            }
            else System.out.println("League of Legends");
        }
    }
}


2.A*搜索

#include<bits/stdc++.h>
using namespace std;
inline int read(){
	int x=0,f=1;char ch=getchar();
	while (ch<'0' || ch>'9'){if (ch=='-') f=-1;ch=getchar();}
	while (ch>='0' && ch<='9'){x=x*10+ch-'0';ch=getchar();}
	return x*f;
}
const int
	Point=1005,
	Edges=100005;
int n,m,start,send,kth;
int dist[Point],times[Point];
bool vis[Point];
struct Edge{
	int to,next,val;
}E[Edges],Eopp[Edges];      //Eopp means Eopposite
int head[Point],head_opp[Point];
struct A_Star_node{
	int p,g,h;
	bool operator < (A_Star_node x)const{
		return x.g+x.h<g+h;
	}
};         //means point  and a_Star:f(x)=g(x)+h(x);
priority_queue<A_Star_node>Q;
inline void add(int Ecnt,int u,int v,int w){
	E[Ecnt].next=head[u];
	E[Ecnt].to=v;
	E[Ecnt].val=w;
	head[u]=Ecnt;
}
inline void add_opposite(int EoppCnt,int u,int v,int w){
	Eopp[EoppCnt].next=head_opp[u];
	Eopp[EoppCnt].to=v;
	Eopp[EoppCnt].val=w;
	head_opp[u]=EoppCnt;
}
void dijkstra(int s,int e){
	memset(vis,0,sizeof(vis));
	memset(dist,127,sizeof(dist));
	int mini;	dist[e]=0;
	for (int i=1;i<=n;i++){
		mini=0;
		for (int j=1;j<=n;j++)
			if (!vis[j] && dist[mini]>dist[j])	mini=j;
		vis[mini]=1;
		for (int x=head_opp[mini];x;x=Eopp[x].next)
			dist[Eopp[x].to]=min(dist[Eopp[x].to],dist[mini]+Eopp[x].val);
	}
}
int A_Star(int s,int e){
	A_Star_node t1,tmp;
	memset(times,0,sizeof(times));
	t1.g=t1.h=0; t1.p=s;
	Q.push(t1);
	while (!Q.empty()){
		t1=Q.top();	Q.pop();
		times[t1.p]++;
		if (times[t1.p]==kth && t1.p==e) return t1.h+t1.g;
		if (times[t1.p]>kth) continue;
		for (int i=head[t1.p];i;i=E[i].next){
			tmp.p=E[i].to;
			tmp.g=dist[E[i].to];
			tmp.h=E[i].val+t1.h;
			Q.push(tmp);
		}
	}
	return -1;
}
int main(){
	n=read(),m=read(),kth=read(),start=read(),send=read();
	int x,y,z;
	memset(head,0,sizeof(head));
	memset(head_opp,0,sizeof(head_opp));
	for (int i=1;i<=m;i++){
		x=read(),y=read(),z=read();
		add(i,x,y,z);
		add_opposite(i,y,x,z);
	}
	dijkstra(start,send);
	if (start==send) kth++;
	int ans=A_Star(start,send);
	if (ans==-1) puts("No");
		else	printf("%d\n",ans);
	return 0;
}

3.最长路

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define maxn 100005

struct node{
    int u,v,w;
    int id;
    node(int id,int u=0,int v=0,int w=0):id(id),u(u),v(v),w(w){}
};
vector<node> g[maxn],mp[maxn];
int u[maxn],v[maxn],w[maxn];

int ans=1;
int vis[maxn];
int dp[maxn];

int get(int u){
    if(vis[u])return dp[u];
    vis[u]=1;
    for(auto e:mp[u]){
        dp[u]=max(dp[u],get(e.v)+1);
    }
    return dp[u];
}

int main(){
    ll n,m;
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        scanf("%d%d%d",u+i,v+i,w+i);
        g[u[i]].push_back(node(i,u[i],v[i],w[i]));
    }
    for(int i=1;i<=n;i++){
        for(auto e:g[i]){
            int j=e.v;
            for(auto ee:g[j]){
                if(e.w<ee.w && e.id<ee.id){
                    mp[e.id].push_back(node(e.id,e.id,ee.id,ee.w));
                }
            }
        }
    }
    memset(vis,0,sizeof(vis));
    for(int i=1;i<=m;i++){
            dp[i]=max(dp[i],get(i));
    }cout<<*max_element(dp+1,dp+1+m)+1;
	return 0;
}

