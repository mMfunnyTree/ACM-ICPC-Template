#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
const int maxn = 1e5+10;
int n,q;
struct edge{int nxt,to;}e[maxn<<1];
int cnt,head[maxn];
int fa[maxn],deep[maxn],siz[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];
void adde(int u,int v){
    e[++cnt].nxt=head[u];
    e[cnt].to=v;
    head[u]=cnt;
}
void dfs1(int u,int pre,int dep){
    fa[u]=pre;deep[u]=dep;siz[u]=1;
    for(int i=head[u];i;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;
        dfs1(v,u,dep+1);
        siz[u]+=siz[v];
        if(siz[v]>siz[son[u]])son[u]=v;
    }
}
void dfs2(int u,int t){
    top[u]=t;id[u]=++cnt;rk[cnt]=u;
    if(!son[u])return;
    dfs2(son[u],t);
    for(int i=head[u];i;i=e[i].nxt){
        int v=e[i].to;
        if(v!=son[u]&&v!=fa[u])dfs2(v,v);
    }
}
/***************************/
int sum[maxn<<2];
void push_up(int rt){
    sum[rt]=sum[rt<<1]+sum[rt<<1|1];
}
void update(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r){
        sum[rt]^=1;
        return;
    }
    int mid=l+r>>1;
    if(L<=mid)update(L,R,lson);
    if(R>mid) update(L,R,rson);
    push_up(rt);
}
int query(int L,int R,int l,int r,int rt){
    if(sum[rt]==0)return 0;
    if(l==r)return l;
    int mid=l+r>>1;
    if(L<=l&&R>=r){
        if(sum[rt<<1])return query(L,R,lson);
        return query(L,R,rson);
    }
    int ret=0;
    if(L<=mid)ret=query(L,R,lson);
    if(ret)return ret;
    if(R>mid)ret=query(L,R,rson);
    return ret;
}
/***************************/
int qquery(int x,int y){
    int ans=0;
    while(top[x]!=top[y]){
        if(deep[top[x]] < deep[top[y]])swap(x,y);
        int tmp=query(id[top[x]],id[x],1,n,1);
        if(tmp)ans=tmp;
        x=fa[top[x]];
    }
    if(deep[x]>deep[y])swap(x,y);
    int tmp=query(id[x],id[y],1,n,1);
    if(tmp)ans=tmp;
    return ans;
}
void uupdate(int x,int y){
    while(top[x]!=top[y]){
        if(deep[top[x]] < deep[top[y]])swap(x,y);
        update(id[top[x]],id[x],1,n,1);
        x=fa[top[x]];
    }
    if(deep[x]>deep[y])swap(x,y);
    update(id[x],id[y],1,n,1);
}
/***************************/
int u,v,w;
char op[10];

int main(){
    scanf("%d%d",&n,&q);
    for(int i=1;i<n;i++){
        scanf("%d%d",&u,&v);
        adde(u,v);adde(v,u);
    }
    rk[0]=-1;
    cnt=0;dfs1(1,0,1);dfs2(1,1);
    while(q--){
        scanf("%s",op);
        if(op[0]=='0'){
            scanf("%d",&u);
            uupdate(u,u);
        }else{
            scanf("%d",&u);
            printf("%d\n",rk[qquery(1,u)]);
        }
    }
    return 0;
}
