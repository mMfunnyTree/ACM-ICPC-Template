#include<cstdio>
#include<cstring>
#include<cstdlib>
const int N=500010,M=2010,K=M*4,inf=~0U>>1;
int Case,n,m,i,o,x,y,z,root,op[M][4];
int vip[N],g[N],v[N<<1],nxt[N<<1],ed,f[N],d[N],id[N],cnt;
int at[K],G[K],W[K],NXT[K],F[K],D[K];
int vv[K],ve[K];
inline void add(int x,int y){v[++ed]=y;nxt[ed]=g[x];g[x]=ed;}
inline void addedge(int x,int y,int z){NXT[y]=G[x];G[x]=y;W[y]=z;}
inline void umin(int&a,int b){a>b?(a=b):0;}
inline void umax(int&a,int b){a<b?(a=b):0;}
inline int abs(int x){return x>0?x:-x;}
inline void swap(int&a,int&b){int c=a;a=b;b=c;}
void dfs(int x){
  int deg=0;
  for(int i=g[x];i;i=nxt[i]){
    int u=v[i];
    if(u==f[x])continue;
    f[u]=x;
    d[u]=d[x]+1;
    dfs(u);
    if(!id[u])continue;
    deg++;
    id[x]^=id[u];
  }
  if(deg>1)vip[x]=1;
  if(!vip[x])return;
  id[x]=++cnt;
  at[cnt]=x;
  for(int i=g[x];i;i=nxt[i]){
    int u=v[i];
    if(u==f[x])continue;
    u=id[u];
    if(!u)continue;
    addedge(cnt,u,d[at[u]]-d[x]-1);
  }
}
void dfs2(int x,int y){
  F[x]=y;
  D[x]=D[y]+1;
  for(int i=G[x];i;i=NXT[i])dfs2(i,x);
}
int main(){
  int size=64<<20;//64MB
  char *p=(char*)std::malloc(size)+size;
  __asm__("movl %0, %%esp\n"::"r"(p));
  scanf("%d",&Case);
  while(Case--){
    scanf("%d%d",&n,&m);
    for(ed=cnt=i=0;i<=n;i++)f[i]=d[i]=id[i]=vip[i]=g[i]=0;
    memset(G,0,sizeof G);
    memset(W,0,sizeof W);
    memset(F,0,sizeof F);
    memset(D,0,sizeof D);
    memset(vv,0,sizeof vv);
    memset(ve,0,sizeof ve);
    for(i=1;i<n;i++)scanf("%d%d",&x,&y),add(x,y),add(y,x);
    for(i=1;i<=m;i++){
      scanf("%d%d%d",&o,&x,&y);
      vip[x]=vip[y]=1;
      op[i][0]=o;
      op[i][1]=x;
      op[i][2]=y;
      if(o==1||o==2||o==3||o==7)scanf("%d",&op[i][3]);
    }
    for(i=1;i<=n;i++)if(vip[i])root=i;
    dfs(root);
    dfs2(id[root],0);
    for(i=1;i<=m;i++){
      o=op[i][0];
      x=id[op[i][1]];
      y=id[op[i][2]];
      z=op[i][3];
      if(o==1){
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          vv[x]+=z;
          ve[x]+=z;
          x=F[x];
        }
        vv[x]+=z;
      }
      if(o==2){
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          vv[x]^=z;
          ve[x]^=z;
          x=F[x];
        }
        vv[x]^=z;
      }
      if(o==3){
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          if(vv[x]>=z)vv[x]-=z;
          if(ve[x]>=z)ve[x]-=z;
          x=F[x];
        }
        if(vv[x]>=z)vv[x]-=z;
      }
      if(o==4){
        long long ans=0;
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          ans+=vv[x];
          ans+=1LL*ve[x]*W[x];
          x=F[x];
        }
        printf("%lld\n",ans+vv[x]);
      }
      if(o==5){
        int ans=0;
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          ans^=vv[x];
          if(W[x]&1)ans^=ve[x];
          x=F[x];
        }
        printf("%d\n",ans^vv[x]);
      }
      if(o==6){
        int mi=inf,ma=0;
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          umin(mi,vv[x]);
          umax(ma,vv[x]);
          if(W[x]){
            umin(mi,ve[x]);
            umax(ma,ve[x]);
          }
          x=F[x];
        }
        umin(mi,vv[x]);
        umax(ma,vv[x]);
        printf("%d\n",ma-mi);
      }
      if(o==7){
        int ans=inf;
        while(x!=y){
          if(D[x]<D[y])swap(x,y);
          umin(ans,abs(vv[x]-z));
          if(W[x])umin(ans,abs(ve[x]-z));
          x=F[x];
        }
        umin(ans,abs(vv[x]-z));
        printf("%d\n",ans);
      }
    }
  }
}