#include <bits/stdc++.h>
using namespace std;

namespace fastIO{
    #define BUF_SIZE 100000
    #define OUT_SIZE 100000
    #define ll long long
    //fread->read
    bool IOerror=0;
//  inline char nc(){char ch=getchar();if(ch==-1)IOerror=1;return ch;}
    inline char nc(){
        static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;
        if(p1==pend){
            p1=buf;pend=buf+fread(buf,1,BUF_SIZE,stdin);
            if(pend==p1){IOerror=1;return -1;}
        }
        return *p1++;
    }
    inline bool blank(char ch){return ch==' '||ch=='\n'||ch=='\r'||ch=='\t';}
    template <class T> inline bool read(T &x){
        bool sign=0;char ch=nc();x=0;
        for(;blank(ch);ch=nc());
        if(IOerror)return false;
        if(ch=='-')sign=1,ch=nc();
        for(;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';
        if(sign)x=-x;
        return true;
    }
    inline bool read(double &x){
        bool sign=0;char ch=nc();x=0;
        for(;blank(ch);ch=nc());
        if(IOerror)return false;
        if(ch=='-')sign=1,ch=nc();
        for(;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';
        if(ch=='.'){
            double tmp=1; ch=nc();
            for(;ch>='0'&&ch<='9';ch=nc())tmp/=10.0,x+=tmp*(ch-'0');
        }
        if(sign)x=-x;
        return true;
    }
    inline bool read(char *s){
        char ch=nc();
        for(;blank(ch);ch=nc());
        if(IOerror)return false;
        for(;!blank(ch)&&!IOerror;ch=nc())*s++=ch;
        *s=0;
        return true;
    }
    inline bool read(char &c){
        for(c=nc();blank(c);c=nc());
        if(IOerror){c=-1;return false;}
        return true;
    }
    template<typename T,typename... U>inline bool read(T& head,U&... tail){return read(head)&&read(tail...);}
    //fwrite->print
    struct Ostream_fwrite{
        char *buf,*p1,*pend;
        Ostream_fwrite(){buf=new char[BUF_SIZE];p1=buf;pend=buf+BUF_SIZE;}
    //  void out(char ch){putchar(ch);}
        void out(char ch){if(p1==pend){fwrite(buf,1,BUF_SIZE,stdout);p1=buf;}*p1++=ch;}
        template <class T>void print(T x){
            static char s[15],*s1;s1=s;
            if(!x)*s1++='0';if(x<0)out('-'),x=-x;
            while(x)*s1++=x%10+'0',x/=10;
            while(s1--!=s)out(*s1);
        }
        void print(double x,int y){
            static ll mul[]=
            {1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,
            10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,
            100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL};
            if(x<-1e-12)out('-'),x=-x;
            ll x2=(ll)floor(x);if(!y&&x-x2>=0.5)++x2;x-=x2;x*=mul[y];
            ll x3=(ll)floor(x);if(y&&x-x3>=0.5)++x3;print(x2);
            if(y>0){out('.');for(size_t i=1;i<y&&x3*mul[i]<mul[y];out('0'),++i);print(x3);}
        }
        void print(char *s){while(*s)out(*s++);}
        void print(const char *s){while(*s)out(*s++);}
        void flush(){if(p1!=buf){fwrite(buf,1,p1-buf,stdout);p1=buf;}}
        ~Ostream_fwrite(){flush();}
    }Ostream;
    template <class T>void print(T x){Ostream.print(x);}
    inline void print(char x){Ostream.out(x);}
    inline void print(char *s){Ostream.print(s);}
    inline void print(const char *s){Ostream.print(s);}
    inline void print(double x,int y){Ostream.print(x,y);}
    template<typename T,typename... U>inline void print(const T& head,const U&... tail){print(head);print(tail...);}
    inline void flush(){Ostream.flush();}
    #undef ll
    #undef OUT_SIZE
    #undef BUF_SIZE
};
using namespace fastIO;

typedef long long ll;
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
const int maxn = 3e4+10;
int n,q;
struct edge{int nxt,to;}e[maxn<<1];
int cnt,head[maxn];
int fa[maxn],deep[maxn],siz[maxn],son[maxn],rk[maxn],top[maxn],id[maxn];
void adde(int u,int v){
    e[++cnt].nxt=head[u];
    e[cnt].to=v;
    head[u]=cnt;
}
void dfs1(int u,int pre,int dep){
    fa[u]=pre;deep[u]=dep;siz[u]=1;
    for(int i=head[u];i;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;
        dfs1(v,u,dep+1);
        siz[u]+=siz[v];
        if(siz[v]>siz[son[u]])son[u]=v;
    }
}
void dfs2(int u,int t){
    top[u]=t;id[u]=++cnt;rk[cnt]=u;
    if(!son[u])return;
    dfs2(son[u],t);
    for(int i=head[u];i;i=e[i].nxt){
        int v=e[i].to;
        if(v!=son[u]&&v!=fa[u])dfs2(v,v);
    }
}
/***************************/
int sum[maxn<<2],maxv[maxn<<2];
void push_up(int rt){
    sum[rt]=sum[rt<<1]+sum[rt<<1|1];
    maxv[rt]=max(maxv[rt<<1],maxv[rt<<1|1]);
}
void update(int L,int R,int v,int l,int r,int rt){
    if(L<=l&&R>=r){
        sum[rt]=v;
        maxv[rt]=v;
        return;
    }
    int mid=l+r>>1;
    if(L<=mid)update(L,R,v,lson);
    if(R>mid) update(L,R,v,rson);
    push_up(rt);
}
int querysum(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r)return sum[rt];
    int ret=0;
    int mid=l+r>>1;
    if(L<=mid)ret+=querysum(L,R,lson);
    if(R>mid)ret+=querysum(L,R,rson);
    return ret;
}
int querymax(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r)return maxv[rt];
    int ret=-1e9;
    int mid=l+r>>1;
    if(L<=mid)ret=max(ret,querymax(L,R,lson));
    if(R>mid)ret=max(ret,querymax(L,R,rson));
    return ret;
}
/***************************/
int qquery(int x,int y){
    int ans=0;
    while(top[x]!=top[y]){
        if(deep[top[x]] < deep[top[y]])swap(x,y);
        ans+=querysum(id[top[x]],id[x],1,n,1);
        x=fa[top[x]];
    }
    if(deep[x]>deep[y])swap(x,y);
    ans+=querysum(id[x],id[y],1,n,1);
    return ans;
}
int qquerymax(int x,int y){
    int ans=-1e9;
    while(top[x]!=top[y]){
        if(deep[top[x]] < deep[top[y]])swap(x,y);
        ans=max(ans,querymax(id[top[x]],id[x],1,n,1));
        x=fa[top[x]];
    }
    if(deep[x]>deep[y])swap(x,y);
    ans=max(ans,querymax(id[x],id[y],1,n,1));
    return ans;
}
void uupdate(int x,int y,int v){
    while(top[x]!=top[y]){
        if(deep[top[x]] < deep[top[y]])swap(x,y);
        update(id[top[x]],id[x],v,1,n,1);
        x=fa[top[x]];
    }
    if(deep[x]>deep[y])swap(x,y);
    update(id[x],id[y],v,1,n,1);
}
/***************************/
char op[15];
int main(){
    read(n);
    int a,b;
    for(int i=2;i<=n;i++){
        read(a,b);
        adde(a,b);adde(b,a);
    }
    cnt=0;dfs1(1,0,1);dfs2(1,1);
    for(int i=1;i<=n;i++){
        read(a);
        update(id[i],id[i],a,1,n,1);
    }
    read(q);
    while(q--){
        read(op,a,b);
        if(op[1]=='M')print(qquerymax(a,b),'\n');
        else if(op[1]=='S')print(qquery(a,b),'\n');
        else update(id[a],id[a],b,1,n,1);
    }
    return 0;
}
