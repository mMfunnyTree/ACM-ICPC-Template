#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define intmid  int mid = (l+r)>>1
#define maxn 50555
typedef long long ll;

int n,m;
struct node
{
    int cur;//延迟操作，-1表示没操作，0表示区间清空，1表示区间填满
    int tlen,llen,rlen;//最大总连续区间，左边最大连续区间，右边最大连续区间
}tree[maxn<<2];

void build(int l,int r,int rt)//建树
{
    tree[rt].llen=tree[rt].rlen=tree[rt].tlen=r-l+1;
    //一开始所有区间都是空的，那么连续的都是最大的
    tree[rt].cur=-1;
    //延迟操作赋值-1，表示没有操作
    if(l==r)return;
    intmid;
    build(lson);build(rson);
}

void push_up(int l,int r,int rt)
{
    tree[rt].llen=tree[rt<<1].llen;
    tree[rt].rlen=tree[rt<<1|1].rlen;
    //当前区间的左右区间等于儿子的左右区间
    intmid;
    if(tree[rt].llen==mid-l+1)
        tree[rt].llen+=tree[rt<<1|1].llen;
    if(tree[rt].rlen==r-mid)
        tree[rt].rlen+=tree[rt<<1].rlen;
    //若左右相连，则更新值
    tree[rt].tlen=max(max(tree[rt<<1].tlen,
                      tree[rt<<1|1].tlen),
                      tree[rt<<1].rlen+
                      tree[rt<<1|1].llen
                      );
    //最大连续区间应为3段取大
}

void push_down(int l,int r,int rt)
{
    if(~tree[rt].cur)
    {
        tree[rt<<1].cur=tree[rt<<1|1].cur=tree[rt].cur;//延迟操作
        if(tree[rt].cur)
        {
            tree[rt<<1].llen=tree[rt<<1].rlen=tree[rt<<1].tlen=0;
            tree[rt<<1|1].llen=tree[rt<<1|1].rlen=tree[rt<<1|1].tlen=0;
        }
        else
        {
            intmid;
            tree[rt<<1].llen=tree[rt<<1].rlen=tree[rt<<1].tlen=mid-l+1;
            tree[rt<<1|1].llen=tree[rt<<1|1].rlen=tree[rt<<1|1].tlen=r-mid;
        }
        tree[rt].cur=-1;//注意赋-1
    }
}

int query(int v,int l,int r,int rt)
{
    if(l==r)
        return l;
    push_down(l,r,rt);
    intmid;
    if(tree[rt<<1].tlen>=v)
        return query(v,lson);
    else if(tree[rt<<1].rlen+tree[rt<<1|1].llen>=v)
        return (l+r)/2-tree[rt<<1].rlen+1;
    else if(tree[rt<<1|1].tlen>=v)
        return query(v,rson);
    //从左到右
}

void update(int L,int R,int v,int l,int r,int rt)
{
    if(L<=l&&r<=R)
    {
        tree[rt].cur=v;
        if(v)
            tree[rt].llen=tree[rt].rlen=tree[rt].tlen=0;
        else
            tree[rt].llen=tree[rt].rlen=tree[rt].tlen=r-l+1;
        return;
    }
    push_down(l,r,rt);
    intmid;
    if(L<=mid)update(L,R,v,lson);
    if(R>mid)update(L,R,v,rson);
    push_up(l,r,rt);
}

int main()
{
    scanf("%d%d",&n,&m);
    build(1,n,1);
    int op,s;
    int ans;
    while(m--)
    {
        scanf("%d",&op);
        if(op==1)
        {
            int s;
            scanf("%d",&s);
            if(s>tree[1].tlen)//tree[1]是区间[1,n]
                ans=0;
            else ans=query(s,1,n,1);
            if(ans)update(ans,ans+s-1,1,1,n,1);
            printf("%d\n",ans);
        }
        else
        {
            int st,len;
            scanf("%d%d",&st,&len);
            update(st,st+len-1,0,1,n,1);
        }
    }
    return 0;
}
