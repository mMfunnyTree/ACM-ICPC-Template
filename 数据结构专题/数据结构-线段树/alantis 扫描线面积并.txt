/*扫描线+离散化*/
#include <bits/stdc++.h>  
using namespace std;  
typedef long long LL;  
#define lson rt << 1, l, mid  
#define rson rt << 1|1, mid + 1, r  
const int MAXN = 2000 + 5;  
int  Col[MAXN << 2], n, cnt, res;  
double X[MAXN << 2], Sum[MAXN << 2];  
struct seg {  
    double l,r,h;  
    int s;  
    seg() {}  
    seg(double l,double r,double h,int s):l(l),r(r),h(h),s(s) {}  
    bool operator < (const seg & object) const {  
        return h < object.h;  
    }  
} S[MAXN];  
  
  
void pushup(int rt,int l,int r) {  
    if (Col[rt]) Sum[rt] = X[r+1] - X[l];//利用[ , ),这个区间性质，左闭右开  
    else if (l == r) Sum[rt] = 0;  
    else Sum[rt] = Sum[rt<<1] + Sum[rt<<1|1];  
}  
  
void update(int L, int R, int c,int rt,int l, int r) {  
    if(L <= l && r <= R) {  
        Col[rt] += c;  
        pushup(rt,l,r);  
        return ;  
    }  
    int mid = (l + r) >> 1;  
    if(L <= mid) update(L, R, c, lson);  
    if(R > mid) update(L, R, c, rson);  
    pushup(rt,l,r);  
}  
  
int binary_find(double x){  
    int lb = -1,ub = res - 1;  
    while(ub - lb > 1){  
        int mid = (lb + ub) >> 1;  
        if(X[mid] >= x) ub = mid;  
        else lb = mid;  
    }  
    return ub;  
}  
  
int main() {  
    int cas = 1;  
    while(~ scanf("%d", &n), n) {  
        cnt = res = 0;  
        for(int i = 0 ; i < n; i ++) {  
            double a,b,c,d;  
            scanf("%lf%lf%lf%lf",&a, &b, &c,&d);  
            S[cnt] = seg(a, c, b, 1);  
            X[cnt ++] = a;  
            S[cnt] = seg(a, c, d, -1);  
            X[cnt ++] = c;  
        }  
        sort(X, X + cnt);  
        sort(S, S + cnt);  
        res ++;  
        for(int i = 1; i < cnt; i ++) {  
            if(X[i] != X[i - 1]) X[res ++] = X[i];  
        }  
  
        memset(Sum, 0, sizeof(Sum));  
        memset(Col, 0, sizeof(Col));  
        double ans = 0;  
        for(int i = 0;i < cnt - 1;i ++){  
            int l = binary_find(S[i].l);  
            int r = binary_find(S[i].r) - 1;//利用[ , ),这个区间性质，左闭右开  
            update(l, r, S[i].s, 1, 0, res - 1);  
            ans += Sum[1] * (S[i + 1].h - S[i].h);  
        }  
        printf("Test case #%d\nTotal explored area: %.2lf\n\n",cas++ , ans);  
    }  
    return 0;  
}  