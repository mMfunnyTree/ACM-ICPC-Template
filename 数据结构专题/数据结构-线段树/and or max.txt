#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e5+10;
int n,m;
int a[maxn];
const int INF = (1<<20)-1;
int maxv[maxn<<2],And[maxn<<2],Or[maxn<<2];/*区间最大值，与标记，或标记*/
int Andv[maxn<<2],orv[maxn<<2];/*区间与值，区间或值*/
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
void push_up(int rt){
    Andv[rt]=Andv[rt<<1]&Andv[rt<<1|1];
    orv[rt]=orv[rt<<1]|orv[rt<<1|1];
    maxv[rt]=max(maxv[rt<<1],maxv[rt<<1|1]);
}
void work_And(int rt,int v){
    maxv[rt]&=v;And[rt]&=v;Or[rt]&=v;
    Andv[rt]&=v;orv[rt]&=v;
}
void work_or(int rt,int v){
    maxv[rt]|=v;And[rt]|=v;Or[rt]|=v;
    Andv[rt]|=v;orv[rt]|=v;
}
void push_down(int rt){
    if(And[rt]!=INF){
        work_And(rt<<1,And[rt]);
        work_And(rt<<1|1,And[rt]);
        And[rt]=INF;
    }
    if(Or[rt]){
        work_or(rt<<1,Or[rt]);
        work_or(rt<<1|1,Or[rt]);
        Or[rt]=0;
    }
}
void build(int l,int r,int rt){
    And[rt]=INF,Or[rt]=0;
    if(l==r){
        maxv[rt]=Andv[rt]=orv[rt]=a[l];return;
    }int mid = l+r>>1;
    build(lson);build(rson);
    push_up(rt);
}
void update(int L,int R,int v,int op,int l,int r,int rt){
    if(L<=l&&R>=r){
        if(op==1){
            if(((v^INF)&((orv[rt]^INF)|Andv[rt]))==(v^INF)){
                work_And(rt,v);return;
            }
        }
        else{
            if((v&((orv[rt]^INF)|Andv[rt]))==v){
                work_or(rt,v);return;
            }
        }
    }
    push_down(rt);
    int mid = l+r>>1;
    if(L<=mid)update(L,R,v,op,lson);
    if(R>mid) update(L,R,v,op,rson);
    push_up(rt);
}
int query(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r)return maxv[rt];
    push_down(rt);
    int mid = l+r>>1,ret=0;
    if(L<=mid)ret=max(ret,query(L,R,lson));
    if(R>mid) ret=max(ret,query(L,R,rson));
    return ret;
}
int main(){
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;++i)scanf("%d",a+i);
    build(1,n,1);
    int l,r,x,op;
    while(m--){
        scanf("%d%d%d",&op,&l,&r);
        if(op==3)printf("%d\n",query(l,r,1,n,1));
        else{
            scanf("%d",&x);
            update(l,r,x,op,1,n,1);
        }
    }
    return 0;
}
