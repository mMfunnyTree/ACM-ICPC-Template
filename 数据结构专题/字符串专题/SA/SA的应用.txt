sa[i]表示排名为i的后缀的开头位置；排名第i的是谁？
rank[i]表示后缀i在所有后缀中的名次；i排第几？
height[i]表示排名i-1的后缀和排名i的后缀的最长公共前缀

性质1：
对于j和k，设rank[j]<rank[k],有
LCP(j,k)=min(height[rank[j]+1],...,height[rank[k]]);

定义h[i]=height[rank[i]]，即后缀i和它前一名的后缀的LCP
有性质：
h[i]>=h[i-1]-1
利用h[]的性质，可以降低复杂度为O(n)

2.1 可重叠最长重复子串
求出height数组的最大值即可，复杂度O(n)

2.2 不可重叠最长重复子串
先对排序后的后缀分组，二分答案k，每组后缀之间的height值不小于k
那么，如果有一组满足：
对于每组，每个后缀的sa值的最大值和最小值之差不小于k，说明存在。
应用：利用height值对后缀进行分组的方法。复杂度O(nlogn)

2.3 至少出现k次的最长子串
二分答案，用height分组，对于任意组，后缀数量大于k，则存在。
复杂度O(nlogn)

2.2.2 不同子串个数
对所有后缀排序之后，每一次新加的后缀，都会产生新的n-sa[k]+1个新前缀。
但是其中有height[k]个是重复的，所以后缀k会贡献：
n-sa[k]+1-height[k]个不同的子串。累加就是答案。复杂度O(n)

2.2.3 回文串
不想看了，有马拉车算法。

2.2.4 连续重复子串
用kmp求最小循环节便可，不看了。

2.2.5 重复次数最多的连续重复子串
跳过

2.3.1 最长公共子串
拼接两个串，找到满足以下条件的height[]即可：
height满足不在同一个字符串中，且height值最大。
复杂度O(n+m)

2.3.2 长度不小于k的公共子串的个数
复杂，不看。

/*----------------------------------------------------*/

1.求字符串所有不同子串个数
我们知道SA数组里面是排好序的所有后缀；
对于每一个后缀，找到所有n个前缀串，所有后缀的前缀串数量相加得结果；
有的后缀之间存在公共前缀，要减去的个数正好是LCP的长度，也就是height数组。

int tot=0;
for(int i=0;i<n;i++){
    tot+=n-i-height[sa[i]];
}


2.求字符串中字典序第k大的子串

int tot=0;
int end;
for(int i=0;i<n;i++){
    int acc=n-sa[i]-height[i];
    if(tot+acc>=k){
        end = k-tot+height[i]-1;
        break;
    }tot+=acc;
}

