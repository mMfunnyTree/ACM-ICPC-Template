const int inf  = 1e9+7;
const int maxn = 4e3+10;
char a[maxn],b[maxn];
int lena,lenb;

int rk[maxn],sa[maxn],height[maxn];
int t1[maxn],t2[maxn],c[maxn];
bool cmp(int *s,int a,int b,int l){
    return s[a]==s[b]&&s[a+l]==s[b+l];
}
void Sa(char *s,int n,int m){
    n++;
    int i,j,p,*x=t1,*y=t2;
    for( i=0;i<m;i++)c[i]=0;
    for( i=0;i<n;i++)c[x[i]=s[i]]++;
    for( i=1;i<m;i++)c[i]+=c[i-1];
    for( i=n-1;i>=0;i--)sa[--c[x[i]]]=i;
    for( j=1;j<=n;j<<=1){
        p=0;
        for( i=n-j;i<n;i++)y[p++]=i;
        for( i=0;i<n;i++)if(sa[i]>=j)y[p++]=sa[i]-j;
        for( i=0;i<m;i++)c[i]=0;
        for( i=0;i<n;i++)c[x[y[i]]]++;
        for( i=1;i<m;i++)c[i]+=c[i-1];
        for( i=n-1;i>=0;i--)sa[--c[x[y[i]]]]=y[i];
        swap(x,y);
        p=1;x[sa[0]]=0;
        for( i=1;i<n;i++)x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
        if(p>=n)break;
        m=p;
    }
    int k=0;
    n--;
    for( i=0;i<=n;i++)rk[sa[i]]=i;
    for( i=0;i<n;i++){
        if(k)k--;
        j=sa[rk[i]-1];
        while(s[i+k]==s[j+k])k++;
        height[rk[i]]=k;
    }
}

int solve1(){
    char s[maxn*2];
    int n=0;
    for(int i=0;i<lena;i++)s[n++]=a[i];
    s[n++]='$';
    for(int i=0;i<lenb;i++)s[n++]=b[i];
    s[n]=0;
    Sa(s,n,128);
    int ret=1e7;
    for(int i=1;i<=n;i++){
        if(sa[i]<lena){
            int q1=inf,q2=inf;
            for(int j=i-1;j;j--){
                q1=min(q1,height[j+1]);
                if(sa[j]>lena)break;
            }
            for(int j=i+1;j<=n;j++){
                q2=min(q2,height[j]);
                if(sa[j]>lena)break;
            }
            if(q2==inf)q2=0;
            q1=max(q1,q2);
            if(sa[i]+q1<lena)
            ret=min(ret,q1+1);
        }
    }
    if(ret>maxn)return -1;
    return ret;
}