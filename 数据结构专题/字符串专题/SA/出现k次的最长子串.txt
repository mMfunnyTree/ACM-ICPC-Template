/**
sa[i]表示排名为i的后缀的开头位置；排名第i的是谁？
rank[i]表示后缀i在所有后缀中的名次；i排第几？
height[i]表示排名i-1的后缀和排名i的后缀的最长公共前缀
**/
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e6+10;

int s[maxn],s2[maxn];
int len;
int sa[maxn],t1[maxn],t2[maxn],c[maxn],rk[maxn],height[maxn],n;

void build_sa(int m){
    int *x=t1,*y=t2;
    for(int i=0;i<m;i++)c[i]=0;
    for(int i=0;i<n;i++)c[x[i]=s[i]]++;
    for(int i=1;i<m;i++)c[i]+=c[i-1];
    for(int i=n-1;i>=0;i--)sa[--c[x[i]]]=i;

    for(int k=1;k<n;k<<=1){
        int p=0;
        for(int i=n-k;i<n;i++)y[p++]=i;
        for(int i=0;i<n;i++)if(sa[i]>=k)y[p++]=sa[i]-k;
        for(int i=0;i<m;i++)c[i]=0;
        for(int i=0;i<n;i++)c[x[i]]++;
        for(int i=1;i<m;i++)c[i]+=c[i-1];
        for(int i=n-1;i>=0;i--)sa[--c[x[y[i]]]]=y[i];
        swap(x,y);
        p=1;
        x[sa[0]]=0;
        for(int i=1;i<n;i++)
            x[sa[i]]=y[sa[i-1]]==y[sa[i]]&&y[sa[i-1]+k]==y[sa[i]+k] ? p-1:p++;
        if(p>=n)break;
        m=p;
    }
}

void get_height(){
    for(int i=0;i<n;i++)rk[sa[i]]=i;
    height[0]=0;
    int k=0;
    for(int i=0;i<n;i++){
        if(!rk[i])continue;
        if(k)k--;
        int j=sa[rk[i]-1];
        while(s[i+k]==s[j+k])k++;
        height[rk[i]]=k;
    }
}

int RMQ[maxn];
int mm[maxn];
int best[20][maxn];
void initRMQ(int n)
{
    mm[0]=-1;
    for(int i=1; i<=n; i++)
        mm[i]=((i&(i-1))==0)?mm[i-1]+1:mm[i-1];
    for(int i=1; i<=n; i++)best[0][i]=i;
    for(int i=1; i<=mm[n]; i++)
        for(int j=1; j+(1<<i)-1<=n; j++)
        {
            int a=best[i-1][j];
            int b=best[i-1][j+(1<<(i-1))];
            if(RMQ[a]<RMQ[b])best[i][j]=a;
            else best[i][j]=b;
        }
}
int askRMQ(int a,int b)
{
    int t;
    t=mm[b-a+1];
    b-=(1<<t)-1;
    a=best[t][a];
    b=best[t][b];
    return RMQ[a]<RMQ[b]?a:b;
}
int lcp(int a,int b)
{
    a=rk[a];
    b=rk[b];
    if(a>b)swap(a,b);
    return height[askRMQ(a+1,b)];
}

int main(){
    /**
    int N,K;
    scanf("%d%d",&N,&K);
    for(int i=0;i<N;i++)scanf("%d",s+i),s[i]++;
    n=N+1;
    build_sa(128);get_height();n--;
    for(int i=1;i<n;i++)RMQ[i]=height[i];
    initRMQ(n);
    int ans=0;
    for(int i=0;i+K-1<=n;i++){
        ans=max(ans,lcp(sa[i],sa[i+K-1]));
    }
    cout<<ans;
    **/

    /**
    int N,K;
    scanf("%d%d",&N,&K);
    for(int i=0;i<N;i++)scanf("%d",s+i),s[i]++;
    n=N;s[n]=1e9;
    build_sa(128);get_height();n--;
    for(int i=1;i<n;i++)RMQ[i]=height[i];
    initRMQ(n);
    int ans=0;
    for(int i=0;i+K-1<n;i++){
        ans=max(ans,lcp(sa[i],sa[i+K-1]));
    }
    cout<<ans;
    **/
    return 0;
}
