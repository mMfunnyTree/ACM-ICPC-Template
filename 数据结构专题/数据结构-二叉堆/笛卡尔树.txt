/**
笛卡尔树模板
1.值域是堆，下标是二叉搜索树
2.中序遍历就是原序列，构造O(n)
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e5+10;
int stk[maxn],tp;
void build(int n,int a[],int ch[][2],int fa[]){
    tp=0;
    for(int i=1;i<=n;++i){
        int last=0;
        while(tp){
            if(a[stk[tp]]<=a[i]){
                if(ch[stk[tp]][1])
                    ch[i][0]=ch[stk[tp]][1],fa[ch[stk[tp]][1]]=i;
                ch[stk[tp]][1]=i;fa[i]=stk[tp];
                break;
            }last=stk[tp--];
        }
        if(!tp&&last)ch[i][0]=last,fa[last]=i;
        stk[++tp]=i;
    }
}
int n,a[maxn],b[maxn],fa[maxn],ch[maxn][2],faa[maxn],chh[maxn][2];
bool d(int x){return ch[fa[x]][1]==x;}
int query(int x,int v){while(fa[x]&&d(x)==v)x=fa[x];return fa[x];}
void dfs(int rt){
    if(!a[rt])return;
    dfs(ch[rt][0]);
    cout<<fa[rt]<<" "<<a[rt]<<endl;
    dfs(ch[rt][1]);
}

bool ok(int len){
    for(int i=1;i<=len;++i){
        fa[i]=faa[i]=0;ch[i][0]=ch[i][1]=0;
        chh[i][0]=chh[i][1]=0;
    }
    build(len,a,ch,fa);
    build(len,b,chh,faa);
    for(int i=1;i<=len;++i){
        if(fa[i]!=faa[i])return 0;
        if(ch[i][0]!=chh[i][0])return 0;
        if(ch[i][1]!=chh[i][1])return 0;
    }return 1;
}
int main(){
    while(cin>>n){
        for(int i=1;i<=n;i++)scanf("%d",a+i);
        for(int i=1;i<=n;i++)scanf("%d",b+i);
        int low=0,high=n+1;
        while(high-low>1){
            int mid=low+high>>1;
            if(ok(mid))low=mid;
            else high=mid;
        }cout<<low<<endl;
    }
    return 0;
}
