// luogu-judger-enable-o2
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 2e5+10;
int n,q;

/*********************LCA*********************/
int rmq[maxn<<1];
struct ST{
    int mm[maxn<<1];
    int dp[maxn<<1][20];
    void init(int n){
        mm[0]=-1;
        for(int i=1;i<=n;i++){
            mm[i]=((i&(i-1))==0)?mm[i-1]+1:mm[i-1];dp[i][0]=i;
        }
        for(int j=1;j<=mm[n];j++){
            for(int i=1;i+(1<<j)-1<=n;i++){
                dp[i][j]=rmq[dp[i][j-1]]<rmq[dp[i+(1<<(j-1))][j-1]]?
                dp[i][j-1]:dp[i+(1<<(j-1))][j-1];
            }
        }
    }
    int query(int a,int b){
        if(a>b)swap(a,b);
        int k=mm[b-a+1];
        return rmq[dp[a][k]]<=rmq[dp[b-(1<<k)+1][k]]?
        dp[a][k]:dp[b-(1<<k)+1][k];
    }
}st;
int F[maxn<<1],p[maxn];
int cnt;
struct edge{int to,nxt;};
edge e[maxn<<1];
int tot,head[maxn];
void adde(int u,int v){
    e[tot].to=v;
    e[tot].nxt=head[u];
    head[u]=tot++;
}
void dfs(int u,int pre,int dep){
    F[++cnt]=u;
    rmq[cnt]=dep;
    p[u]=cnt;
    for(int i=head[u];i!=-1;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;
        dfs(v,u,dep+1);
        F[++cnt]=u;
        rmq[cnt]=dep;
    }
}
void lca_init(int rt,int num){
    dfs(rt,rt,0);
    st.init(2*num-1);
}
int query_lca(int u,int v){return F[st.query(p[u],p[v])];}
/*********************LCA*********************/

struct node{
    int op,x,y,c;
}pp[maxn];
int val[maxn];

int T[maxn],lson[maxn<<5],rson[maxn<<5],c[maxn<<5];
void build(int &rt,int l,int r){
    rt=tot++;
    c[rt]=0;
    if(l!=r){
        int mid=l+r>>1;
        build(lson[rt],l,mid);build(rson[rt],mid+1,r);
    }
}
int update(int rt,int pos,int val){
    int nrt=tot++,tmp=nrt;c[nrt]=c[rt]+val;
    int l=1,r=q;
    while(l<r){
        int mid=l+r>>1;
        if(pos<=mid){
            lson[nrt]=tot++,rson[nrt]=rson[rt];nrt=lson[nrt];rt=lson[rt];r=mid;
        }else{
            rson[nrt]=tot++,lson[nrt]=lson[rt];nrt=rson[nrt];rt=rson[rt];l=mid+1;
        }c[nrt]=c[rt]+val;
    }return tmp;
}
int query(int lrt,int rrt,int lcart,int l,int r,int lim){
    if(r<lim)return c[lrt]+c[rrt]-2*c[lcart];
    int mid=l+r>>1;
    int ret=0;
    if(lim>l)ret+=query(lson[lrt],lson[rrt],lson[lcart],l,mid,lim);
    if(lim>mid+1)ret+=query(rson[lrt],rson[rrt],rson[lcart],mid+1,r,lim);
    return ret;
}
void dfs_build(int u,int pre){
    if(!val[u])val[u]=q;
    T[u]=update(T[pre],val[u],1);
    for(int i=head[u];i!=-1;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;dfs_build(v,u);
    }
}
int main(){
    memset(head,-1,sizeof head);
    scanf("%d",&n);
    int P;
    for(int i=1;i<=n;i++){
        scanf("%d",&P);
        adde(P,i);
    }
    lca_init(1,n);
    scanf("%d",&q);
    for(int i=1;i<=q;i++){
        scanf("%d",&pp[i].op);
        if(pp[i].op==1){
            scanf("%d%d%d",&pp[i].x,&pp[i].y,&pp[i].c);
        }
        else{
            scanf("%d",&pp[i].c);
            val[pp[i].c]=i;
        }
    }
    tot=0;
    build(T[0],1,q);
    dfs_build(1,0);
    for(int i=1;i<=q;i++){
        if(pp[i].op==1){
            int LCA = query_lca(pp[i].x,pp[i].y);
            int ans=query(T[pp[i].x],T[pp[i].y],T[LCA],1,q,i-pp[i].c);
            //printf("%d\n",ans);
            if(val[LCA]<i-pp[i].c)ans++;
            printf("%d %d\n",rmq[p[pp[i].x]] + rmq[p[pp[i].y]] - 2*rmq[p[LCA]]+1 , ans);
        }
    }
    return 0;
}
