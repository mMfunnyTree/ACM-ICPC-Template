#include<bits/stdc++.h>
using namespace std;

const int maxn = 2e5+10;
int n,q,cntn,TOT;
int a[maxn],dt[maxn];
int T[maxn],lson[maxn<<5],rson[maxn<<5],c[maxn<<5];
void init_hash(){
    sort(dt+1,dt+1+cntn);
    cntn=unique(dt+1,dt+1+cntn)-dt-1;
}
int hs(int x){return lower_bound(dt+1,dt+1+cntn,x)-dt;}
int build(int l,int r){
    int rt=TOT++;
    c[rt]=0;
    if(l!=r){
        int mid=l+r>>1;
        lson[rt]=build(l,mid);rson[rt]=build(mid+1,r);
    }return rt;
}
int update(int rt,int pos,int val){
    int nrt=TOT++,tmp=nrt;
    c[nrt]=c[rt]+val;
    int l=1,r=cntn;
    while(l<r){
        int mid=l+r>>1;
        if(pos<=mid){
            lson[nrt]=TOT++,rson[nrt]=rson[rt];nrt=lson[nrt];rt=lson[rt];r=mid;
        }else{
            rson[nrt]=TOT++,lson[nrt]=lson[rt];nrt=rson[nrt];rt=rson[rt];l=mid+1;
        }c[nrt]=c[rt]+val;
    }return tmp;
}
int query(int lrt,int rrt,int LCA,int k){
    int lcart=T[LCA];
    int pos=hs(a[LCA]);
    int l=1,r=cntn;
    while(l<r){
        int mid=l+r>>1;
        int tmp = c[lson[lrt]]+c[lson[rrt]]-2*c[lson[lcart]]+(pos>=l&&pos<=mid);
        if(tmp>=k){
            lrt=lson[lrt];rrt=lson[rrt];lcart=lson[lcart];r=mid;
        }else{
            k-=tmp;l=mid+1;
            lrt=rson[lrt];rrt=rson[rrt];lcart=rson[lcart];
        }
    }return l;
}
int rmq[maxn<<1];
struct ST{
    int mm[maxn<<1];
    int dp[maxn<<1][20];
    void init(int n){
        mm[0]=-1;
        for(int i=1;i<=n;i++){
            mm[i]=((i&(i-1))==0)?mm[i-1]+1:mm[i-1];dp[i][0]=i;
        }
        for(int j=1;j<=mm[n];j++){
            for(int i=1;i+(1<<j)-1<=n;i++){
                dp[i][j]=rmq[dp[i][j-1]]<rmq[dp[i+(1<<(j-1))][j-1]]?
                dp[i][j-1]:dp[i+(1<<(j-1))][j-1];
            }
        }
    }
    int query(int a,int b){
        if(a>b)swap(a,b);
        int k=mm[b-a+1];
        return rmq[dp[a][k]]<=rmq[dp[b-(1<<k)+1][k]]?
        dp[a][k]:dp[b-(1<<k)+1][k];
    }
}st;
int F[maxn<<1],p[maxn];
int cnt;
struct edge{int to,nxt;};
edge e[maxn<<1];
int tot,head[maxn];

void adde(int u,int v){
    e[tot].to=v;
    e[tot].nxt=head[u];
    head[u]=tot++;
}

void dfs(int u,int pre,int dep){
    F[++cnt]=u;
    rmq[cnt]=dep;
    p[u]=cnt;
    for(int i=head[u];i!=-1;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;
        dfs(v,u,dep+1);
        F[++cnt]=u;
        rmq[cnt]=dep;
    }
}
void lca_init(int rt,int num){
    dfs(rt,rt,0);
    st.init(2*num-1);
}
int query_lca(int u,int v){return F[st.query(p[u],p[v])];}
void dfs_build(int u,int pre){
    int pos=hs(a[u]);
    T[u]=update(T[pre],pos,1);
    for(int i=head[u];i!=-1;i=e[i].nxt){
        int v=e[i].to;
        if(v==pre)continue;
        dfs_build(v,u);
    }
}
int ls=0;
int main(){
    memset(head,-1,sizeof head);
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++)scanf("%d",a+i),dt[++cntn]=a[i];
    init_hash();
    int u,v,k;
    for(int i=1;i<n;i++){
        scanf("%d%d",&u,&v);
        adde(u,v);adde(v,u);
    }
    lca_init(1,n);
    T[0]=build(1,cntn);
    dfs_build(1,0);
    while(q--){
        scanf("%d%d%d",&u,&v,&k);u^=ls;
        printf("%d\n",ls=dt[query(T[u],T[v],query_lca(u,v),k)]);
    }
    return 0;
}
